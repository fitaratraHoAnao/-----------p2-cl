const axios = require('axios');
const sendMessage = require('../handles/sendMessage'); // Importer la fonction sendMessage

// D√©claration des URL de base de vos API
const BASE_API_URL = 'https://api.kenliejugarap.com/ministral-3b-paid/';
const DATE_API_URL = 'https://date-heure.vercel.app/date?heure=Madagascar';

module.exports = async (senderId, userText) => {
    // Extraire le prompt en retirant le pr√©fixe 'ai' et en supprimant les espaces superflus
    const prompt = userText.slice(3).trim();

    // V√©rifier si le prompt est vide
    if (!prompt) {
        await sendMessage(senderId, 'Veuillez fournir une question ou un sujet pour que je puisse vous aider.');
        return;
    }

    try {
        // Envoyer un message de confirmation que la requ√™te est en cours de traitement
        await sendMessage(senderId, "Message re√ßu, je pr√©pare une r√©ponse...");

        // Appeler l'API principale avec le prompt fourni et l'ID utilisateur
        const apiUrl = `${BASE_API_URL}?question=${encodeURIComponent(prompt)}&userId=${senderId}`;
        const aiResponse = await axios.get(apiUrl);

        // R√©cup√©rer la r√©ponse de l'API
        const aiReply = aiResponse.data.response;

        // Appeler l'API de date pour obtenir l'heure actuelle √† Madagascar
        const dateResponse = await axios.get(DATE_API_URL);
        const currentDateTime = dateResponse.data.datetime;

        // Construire le message final avec les formats sp√©cifi√©s
        const finalMessage = `
ü§ñ ‚Ä¢ ùóïùóøùòÇùóªùóºùóñùóµùóÆùòÅ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚ùìùó¨ùóºùòÇùóø ùó§ùòÇùó≤ùòÄùòÅùó∂ùóºùóª: ${prompt}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ ùóîùóªùòÄùòÑùó≤ùóø: ${aiReply}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚è∞ ùó•ùó≤ùòÄùóΩùóºùóªùòÄùó≤: ${currentDateTime} √† Madagascar

üá≤üá¨Lien Facebook de l'admin: ‚úÖhttps://www.facebook.com/bruno.rakotomalala.7549
        `;

        // Attendre 2 secondes avant d'envoyer la r√©ponse pour un d√©lai naturel
        await new Promise(resolve => setTimeout(resolve, 2000));

        // Envoyer la r√©ponse format√©e √† l'utilisateur
        await sendMessage(senderId, finalMessage);
    } catch (error) {
        console.error('Erreur lors de l\'appel √† l\'API:', error);

        // Envoyer un message d'erreur √† l'utilisateur en cas de probl√®me
        await sendMessage(senderId, 'D√©sol√©, une erreur s\'est produite lors du traitement de votre question.');
    }
};

// Ajouter les informations de la commande
module.exports.info = {
    name: "ai",  // Le nom de la commande
    description: "Envoyer une question ou un sujet pour obtenir une r√©ponse g√©n√©r√©e par l'IA.",  // Description de la commande
    usage: "Envoyez 'ai <votre question>' pour obtenir une r√©ponse."  // Comment utiliser la commande
};
