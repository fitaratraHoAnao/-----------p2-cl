const axios = require('axios');
const sendMessage = require('../handles/sendMessage'); // Importer la fonction sendMessage

// DÃ©claration des URL d'API
const BASE_API_URL = 'https://api.kenliejugarap.com/blackbox-claude/';
const MYMEMORY_API_URL = 'https://api.mymemory.translated.net/get';

// Stockage des sessions pour conserver le contexte de la conversation
const userSessions = {};

module.exports = async (senderId, userText) => {
Â Â Â  const prompt = userText.slice(6).trim(); // Extraire le prompt en retirant le prÃ©fixe 'claude'

Â Â Â  if (!prompt) {
Â Â Â Â Â Â Â  await sendMessage(senderId, 'Veuillez fournir une question ou un sujet pour que je puisse vous aider.');
Â Â Â Â Â Â Â  return;
Â Â Â  }

Â Â Â  // Initialiser la session de l'utilisateur si elle n'existe pas encore
Â Â Â  if (!userSessions[senderId]) {
Â Â Â Â Â Â Â  userSessions[senderId] = [];
Â Â Â  }

Â Â Â  // Ajouter le prompt actuel Ã  l'historique de conversation de l'utilisateur
Â Â Â  userSessions[senderId].push({ role: 'user', content: prompt });

Â Â Â  try {
Â Â Â Â Â Â Â  await sendMessage(senderId, "ðŸ“²ðŸ’« Patientez, la rÃ©ponse arriveâ€¦ ðŸ’«ðŸ“²");

Â Â Â Â Â Â Â  // PrÃ©parer l'historique de la conversation
Â Â Â Â Â Â Â  const conversationHistory = userSessions[senderId]
Â Â Â Â Â Â Â Â Â Â Â  .map(entry => `${entry.role}: ${entry.content}`)
Â Â Â Â Â Â Â Â Â Â Â  .join('\n');

Â Â Â Â Â Â Â  // Appel Ã  l'API Claude avec l'historique
Â Â Â Â Â Â Â  const apiUrl = `${BASE_API_URL}?text=${encodeURIComponent(conversationHistory)}&userId=${senderId}`;
Â Â Â Â Â Â Â  const response = await axios.get(apiUrl);
Â Â Â Â Â Â Â  const reply = response.data.response;

Â Â Â Â Â Â Â  // Ajouter la rÃ©ponse du bot Ã  l'historique de conversation de l'utilisateur
Â Â Â Â Â Â Â  userSessions[senderId].push({ role: 'bot', content: reply });

Â Â Â Â Â Â Â  // Fonction pour dÃ©couper un texte en segments de taille maximale
Â Â Â Â Â Â Â  const splitText = (text, maxLength) => {
Â Â Â Â Â Â Â Â Â Â Â  const words = text.split(' ');
Â Â Â Â Â Â Â Â Â Â Â  const segments = [];
Â Â Â Â Â Â Â Â Â Â Â  let currentSegment = [];

Â Â Â Â Â Â Â Â Â Â Â  words.forEach(word => {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  if ((currentSegment.join(' ').length + word.length + 1) <= maxLength) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  currentSegment.push(word);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  } else {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  segments.push(currentSegment.join(' '));
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  currentSegment = [word];
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  }
Â Â Â Â Â Â Â Â Â Â Â  });

Â Â Â Â Â Â Â Â Â Â Â  if (currentSegment.length > 0) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  segments.push(currentSegment.join(' '));
Â Â Â Â Â Â Â Â Â Â Â  }

Â Â Â Â Â Â Â Â Â Â Â  return segments;
Â Â Â Â Â Â Â  };

Â Â Â Â Â Â Â  // DÃ©couper la rÃ©ponse en segments de 500 mots
Â Â Â Â Â Â Â  const segments = splitText(reply, 500);

Â Â Â Â Â Â Â  // Traduire chaque segment en franÃ§ais
Â Â Â Â Â Â Â  const translateToFrench = async (text) => {
Â Â Â Â Â Â Â Â Â Â Â  try {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  const response = await axios.get(MYMEMORY_API_URL, {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  params: {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  q: text,
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  langpair: 'en|fr'
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  }
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  });
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  return response.data.responseData.translatedText;
Â Â Â Â Â Â Â Â Â Â Â  } catch (error) {
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  console.error('Erreur lors de la traduction :', error);
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â  return 'Erreur de traduction pour ce segment.';
Â Â Â Â Â Â Â Â Â Â Â  }
Â Â Â Â Â Â Â  };

Â Â Â Â Â Â Â  // Traduire chaque segment et assembler les rÃ©sultats
Â Â Â Â Â Â Â  const translatedSegments = await Promise.all(segments.map(segment => translateToFrench(segment)));
Â Â Â Â Â Â Â  const translatedReply = translatedSegments.join(' ');

Â Â Â Â Â Â Â  // Envoyer la rÃ©ponse traduite Ã  l'utilisateur
Â Â Â Â Â Â Â  await sendMessage(senderId, translatedReply);
Â Â Â  } catch (error) {
Â Â Â Â Â Â Â  console.error('Erreur lors de l\'appel Ã  l\'API Claude ou MyMemory:', error);
Â Â Â Â Â Â Â  await sendMessage(senderId, 'DÃ©solÃ©, une erreur s\'est produite lors du traitement de votre question. Veuillez rÃ©essayer plus tard.');
Â Â Â  }
};

// Ajouter les informations de la commande
module.exports.info = {
Â Â Â  name: "claude",
Â Â Â  description: "Envoyer une question ou un sujet pour obtenir une rÃ©ponse gÃ©nÃ©rÃ©e par l'IA.",
Â Â Â  usage: "Envoyez 'claude <votre question>' pour obtenir une rÃ©ponse."
};
